// AUTO-GENERATED FILE. Do not edit manually.
// Generated by contracts/contract-to-ts.mjs

import { BaseDoc, DataContract, DocumentType, DocIndexSymbol, IndicesOf } from './contract-api'

export type DocTypeName = "like" | "list" | "mute" | "post" | "block" | "avatar" | "follow" | "repost" | "profile" | "bookmark" | "listMember" | "notification" | "directMessage";

export interface LikeDocument extends BaseDoc {
  postId: string;
}

export type LikeIndex = {
  "postAndOwner": ["postId", "$ownerId"];
  "ownerLikes": ["$ownerId", "$createdAt"];
  "postLikes": ["postId", "$createdAt"];
};
export interface LikeDocument { readonly [DocIndexSymbol]?: LikeIndex }

export class Like extends DocumentType<LikeDocument, LikeIndex> { constructor(contract: DataContract){ super(contract, "like") } }

export interface ListDocument extends BaseDoc {
  name: string;
  private?: boolean;
  description?: string;
}

export type ListIndex = {
  "ownerLists": ["$ownerId", "$createdAt"];
};
export interface ListDocument { readonly [DocIndexSymbol]?: ListIndex }

export class List extends DocumentType<ListDocument, ListIndex> { constructor(contract: DataContract){ super(contract, "list") } }

export interface MuteDocument extends BaseDoc {
  mutedId: string;
  untilTimestamp?: number;
}

export type MuteIndex = {
  "ownerAndMuted": ["$ownerId", "mutedId"];
  "ownerMutes": ["$ownerId", "$createdAt"];
};
export interface MuteDocument { readonly [DocIndexSymbol]?: MuteIndex }

export class Mute extends DocumentType<MuteDocument, MuteIndex> { constructor(contract: DataContract){ super(contract, "mute") } }

export interface PostDocument extends BaseDoc {
  content: string;
  language?: string;
  mediaUrl?: string;
  sensitive?: boolean;
  quotedPostId?: string;
  replyToPostId?: string;
  firstMentionId?: string;
  primaryHashtag?: string;
}

export type PostIndex = {
  "ownerAndTime": ["$ownerId", "$createdAt"];
  "timeline": ["$createdAt"];
  "replyToPost": ["replyToPostId", "$createdAt"];
};
export interface PostDocument { readonly [DocIndexSymbol]?: PostIndex }

export class Post extends DocumentType<PostDocument, PostIndex> { constructor(contract: DataContract){ super(contract, "post") } }

export interface BlockDocument extends BaseDoc {
  blockedId: string;
}

export type BlockIndex = {
  "ownerAndBlocked": ["$ownerId", "blockedId"];
  "ownerBlocks": ["$ownerId", "$createdAt"];
};
export interface BlockDocument { readonly [DocIndexSymbol]?: BlockIndex }

export class Block extends DocumentType<BlockDocument, BlockIndex> { constructor(contract: DataContract){ super(contract, "block") } }

export interface AvatarDocument extends BaseDoc {
  data: string;
  style?: "realistic" | "cartoon" | "anime" | "pixel";
  version: number;
}

export type AvatarIndex = {
  "owner": ["$ownerId"];
  "updatedAt": ["$updatedAt"];
};
export interface AvatarDocument { readonly [DocIndexSymbol]?: AvatarIndex }

export class Avatar extends DocumentType<AvatarDocument, AvatarIndex> { constructor(contract: DataContract){ super(contract, "avatar") } }

export interface FollowDocument extends BaseDoc {
  followingId: string;
}

export type FollowIndex = {
  "ownerAndFollowing": ["$ownerId", "followingId"];
  "following": ["$ownerId", "$createdAt"];
  "followers": ["followingId", "$createdAt"];
};
export interface FollowDocument { readonly [DocIndexSymbol]?: FollowIndex }

export class Follow extends DocumentType<FollowDocument, FollowIndex> { constructor(contract: DataContract){ super(contract, "follow") } }

export interface RepostDocument extends BaseDoc {
  postId: string;
}

export type RepostIndex = {
  "postAndOwner": ["postId", "$ownerId"];
  "ownerReposts": ["$ownerId", "$createdAt"];
  "postReposts": ["postId", "$createdAt"];
};
export interface RepostDocument { readonly [DocIndexSymbol]?: RepostIndex }

export class Repost extends DocumentType<RepostDocument, RepostIndex> { constructor(contract: DataContract){ super(contract, "repost") } }

export interface ProfileDocument extends BaseDoc {
  bio?: string;
  website?: string;
  avatarId?: string;
  location?: string;
  bannerUrl?: string;
  displayName: string;
}

export type ProfileIndex = {
  "owner": ["$ownerId"];
  "createdAt": ["$createdAt"];
};
export interface ProfileDocument { readonly [DocIndexSymbol]?: ProfileIndex }

export class Profile extends DocumentType<ProfileDocument, ProfileIndex> { constructor(contract: DataContract){ super(contract, "profile") } }

export interface BookmarkDocument extends BaseDoc {
  postId: string;
}

export type BookmarkIndex = {
  "ownerAndPost": ["$ownerId", "postId"];
  "ownerBookmarks": ["$ownerId", "$createdAt"];
};
export interface BookmarkDocument { readonly [DocIndexSymbol]?: BookmarkIndex }

export class Bookmark extends DocumentType<BookmarkDocument, BookmarkIndex> { constructor(contract: DataContract){ super(contract, "bookmark") } }

export interface ListMemberDocument extends BaseDoc {
  listId: string;
  memberId: string;
}

export type ListMemberIndex = {
  "listAndMember": ["listId", "memberId"];
  "listMembers": ["listId", "$createdAt"];
};
export interface ListMemberDocument { readonly [DocIndexSymbol]?: ListMemberIndex }

export class ListMember extends DocumentType<ListMemberDocument, ListMemberIndex> { constructor(contract: DataContract){ super(contract, "listMember") } }

export interface NotificationDocument extends BaseDoc {
  read?: boolean;
  type: "like" | "repost" | "follow" | "reply" | "mention" | "quote";
  postId?: string;
  fromUserId: string;
}

export type NotificationIndex = {
  "ownerNotifications": ["$ownerId", "$createdAt"];
  "unreadNotifications": ["$ownerId", "read", "$createdAt"];
};
export interface NotificationDocument { readonly [DocIndexSymbol]?: NotificationIndex }

export class Notification extends DocumentType<NotificationDocument, NotificationIndex> { constructor(contract: DataContract){ super(contract, "notification") } }

export interface DirectMessageDocument extends BaseDoc {
  read?: boolean;
  recipientId: string;
  conversationId: string;
  encryptedContent: string;
}

export type DirectMessageIndex = {
  "conversation": ["conversationId", "$createdAt"];
  "senderMessages": ["$ownerId", "$createdAt"];
};
export interface DirectMessageDocument { readonly [DocIndexSymbol]?: DirectMessageIndex }

export class DirectMessage extends DocumentType<DirectMessageDocument, DirectMessageIndex> { constructor(contract: DataContract){ super(contract, "directMessage") } }

export interface DocumentsByType {
  like: LikeDocument;
  list: ListDocument;
  mute: MuteDocument;
  post: PostDocument;
  block: BlockDocument;
  avatar: AvatarDocument;
  follow: FollowDocument;
  repost: RepostDocument;
  profile: ProfileDocument;
  bookmark: BookmarkDocument;
  listMember: ListMemberDocument;
  notification: NotificationDocument;
  directMessage: DirectMessageDocument;
}
